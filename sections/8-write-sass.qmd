---
format: revealjs
---

## {#cute-animals data-menu-title="Cute animals report"}

[We have a very important report in need to some styling]{.slide-title-smaller}

<hr>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/report.png")
```

::: {.body-text .center-text}
Open & render [`cuteness-report.qmd`](https://github.com/samanthacsik/cute-cats-dogs/blob/main/report/cuteness-report.qmd) by clicking the **Render** button in RStudio
:::

---

##  {#create-scss data-menu-title="Create .scss"}

[Create a `.scss` file]{.slide-title-smaller}

<hr>

::: {.body-text}
1. Create a `.scss` file in the `report/` folder -- you can do this using the `touch` command in the RStudio terminal (You may need to first `cd` (change directory) into this folder using the terminal, or manually move your `.scss` into the `report/` folder after creating it):
:::

```{css}
#| eval: false
#| echo: true
touch practice-styles.scss 
```

. . . 

::: {.body-text}
2. Add the `/*-- scss:defaults --*/` and `/*-- scss:rules --*/` region decorators to `cuteness-report.scss` ([required by Quarto](https://quarto.org/docs/output-formats/html-themes-more.html)): 
:::

```{css}
#| eval: false
#| echo: true
/*-- scss:defaults --*/

// Sass variables will go here

/*-- scss:rules --*/

// CSS rules will go here
```

---

##  {#link-scss data-menu-title="Link .scss to .qmd"}

[Apply your `.scss` stylesheet to your `.qmd`]{.slide-title-smaller}

<hr>

::: {.body-text}
Link `my-report-styles.scss` to your `cuteness-report.qmd` file using the `theme` option in the YAML (see lines 11-12):
:::

```{.md}
---
title: "Are dogs or cats cuter?"
subtitle: "A very important report"
author: "Sam Csik"
date: "August 3, 2023"

format: 
  html:
    toc: true
    toc-location: left
    theme: 
      - my-report-styles.scss
    
execute: 
  eval: true
  echo: false
  message: false
  warning: false
---
```

---

##  {#color-vars data-menu-title="Define Sass vars for colors"}

[Define some color variables]{.slide-title-smaller}

<hr>

::: {.body-text}
Because this is NCEAS-funded research (jk jk, but let's pretend), we'll be using NCEAS colors to style our report. Define any colors you plan to use throughout your stylesheet using the syntax, `$colorName: HEXcode;`
:::

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "3-10"
/*-- scss:defaults --*/

// colors
$green: #348553;
$light-green: #589244; 
$yellow: #E9A300;
$red: #A23601;
$white: #FFFFFF;
$gray: #ADADAD;
$black: #525452; 

/*-- scss:rules --*/

// CSS rules will go here
```

<br>

::: {.body-text .important-text-bg}
**Note:** You won't see new styling on your report just yet! We've defined some Sass variables here, but haven't yet applied them.
:::

---

##  {#import-fonts-1 data-menu-title="Import Google fonts (1/2)"}

[Import Google fonts (1/2)]{.slide-title-smaller}

<hr>

::: {.body-text .center-text}
Start by exploring fonts at <https://fonts.google.com/>. Once you found a one (or more) that you like: 
:::

::: incremental
::: {.body-text}
1. Select which weights and styles to import from the **Styles** section -- click the **+** button, <img src="images/gf+.png" alt="" style="display: inline-block; margin: 0; position: relative; top: 3px; width:25px;height:25px;"/>, to the right of the style you want.

2. Click on **View selected families**, <img src="images/view-fonts.png" alt="" style="display: inline-block; margin: 0; position: relative; top: 3px; width:25px;height:25px;"/> (top right corner), to see all of your selected fonts. Under the **Use on the web** section, select the radio button for **@import** and copy everything between the `<style> </style>` tags (starting with `@import` and ending with `;`) to your clipboard.
:::
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "50%" 
knitr::include_graphics("images/google-fonts.gif")
```

---

##  {#import-fonts-2 data-menu-title="Import Google fonts (2/2)"}

[Import & define Google font variables (2/2)]{.slide-title-smaller}

<hr>

::: {.body-text}
3. Paste your import code into `my-report-styles.scss`, beneath `/*-- scss:defaults --*/`
:::

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "3-4"
/*-- scss:defaults --*/

// import fonts from fonts.google.com
@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Nunito:wght@400;800&display=swap');

// colors
$green: #348553;
$light-green: #589244; 
$yellow: #E9A300;
$red: #A23601;
$white: #FFFFFF;
$gray: #ADADAD;
$black: #525452; 
```

::: {.body-text}
Here, we import two font families:

- [Arvo](https://fonts.google.com/specimen/Arvo?query=arvo), in Regular 400, a [serif font](https://fonts.google.com/knowledge/glossary/serif) that we'll use for headers
- [Nunito](https://fonts.google.com/specimen/Nunito?query=nunito), in Regular 400 and ExtraBold 800, a [sans-serif font](https://fonts.google.com/knowledge/glossary/sans_serif) that we'll use for everything else!

::: {.important-text-bg .center-text}
**Note:** You *must* import a higher font weight (e.g. 800) if you wish to **bold** text.
:::
:::

---

##  {#apply-colors-fonts data-menu-title="Apply colors & fonts"}

[Checking in -- any questions?]{.slide-title}

<hr>
<br>

. . . 

::: {.center-text}
Ok, now let's *use* our colors & fonts
:::

. . . 

<br>

::: {.body-text}
::: {.center-text}
We can do this in **two different ways** (spoiler, we'll be using both!):
:::

::: incremental
1. [**Specifying [Quarto's Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables)**]{.yellow-underline} -- this is a super fast and easy way to make larger-scale changes to your theme
2. [**Writing CSS rules**]{.yellow-underline}, just like we practiced earlier -- this is great for making fine-tuned adjustments
:::
:::

---

##  {#specify-fonts-vars data-menu-title="Specify font variables"}

[Specify font variables]{.slide-title}

<hr>

::: {.body-text}
Define font style Sass variables, beneath `/*-- scss:defaults --*/`, using the syntax below:
:::

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "15-17"
/*-- scss:defaults --*/

// import fonts from fonts.google.com 
@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Nunito:wght@400;800&display=swap');

// colors
$green: #348553;
$light-green: #589244; 
$yellow: #E9A300;
$red: #A23601;
$white: #FFFFFF;
$gray: #ADADAD;
$black: #525452; 

// font styles
$font-family-sans-serif: 'Nunito', sans-serif;
$font-family-serif: 'Arvo', serif; 
```

<br>

::: {.important-text-bg .body-text}
**Note:** `$font-family-sans-serif` will automatically be applied across your Quarto document.
:::

---

##  {#additional-sass-vars data-menu-title="Additional Sass variables"}

[Specify additional variables]{.slide-title}

<hr>

::: {.body-text}
**Note:** All specified Sass variables could alternatively be written using CSS. *However*, this approach is quick, easy to write, and importantly, *easy to read*.
:::

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "19-27"
/*-- scss:defaults --*/

// import fonts from fonts.google.com 
@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Nunito:wght@400;800&display=swap');

// colors
$green: #348553;
$light-green: #589244; 
$yellow: #E9A300;
$red: #A23601;
$white: #FFFFFF;
$gray: #ADADAD;
$black: #525452; 

// font styles
$font-family-sans-serif: 'Nunito', sans-serif;
$font-family-serif: 'Arvo', serif; 

// find all Quarto Sass vars here: https://quarto.org/docs/output-formats/html-themes.html#sass-variables
$font-size-root: 1.2em; 
$body-color: $black;
$link-color: $red; 
$toc-color: $green; 
$toc-active-border: $yellow; 
$toc-inactive-border: $gray; 
$code-color: $light-green; 
$code-bg: $white;
```

---

##  {#rerender data-menu-title="Re-render report"}

[Re-render to check out your new styling]{.slide-title-smallest}

<hr>

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/without-sass-styling.png")
```

::: {.smaller-caption-text .center-text}
Without `my-report-styles.scss` applied
:::
:::

::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/with-sass-styling.png")
```

::: {.smaller-caption-text .center-text}
With `my-report-styles.scss` applied
:::
:::

::::

. . .

::: {.large-body-text .center-text}
**Next up:** fine-tuning with some CSS
:::

---

##  {#inspect data-menu-title="Inspecting is helpful"}

["Inspect"ing reveals how CSS is used to target HTML elements]{.slide-title-smallest}

<hr>

::: {.body-text}
Temporarily "edit" CSS selectors (refreshing your browser will revert your page back to its original state) -- helps to identify exactly which elements different selectors are manipulating *and* allows you to try out styles before actually hard-coding them.
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/inspect.gif")
```

---

##  {#define-element-selectors data-menu-title="Define element selectors"}

[Start with element selectors (at least, I like to)]{.slide-title-smallest}

<hr>

:::: {.columns}

::: {.column width="50%"}

::: {.body-text}
The following CSS rules apply styling to level 2 & 3 headers (inspecting the page helped me test these out first!):

- **Level 2 headers (`<h2>`/`##`):** 
  - colored green
  - section underlined in yellow
  - serif font (Arvo)
- **Level 3 headers (`<h3>`/`###`):** 
  - colored green
  
:::

::: {.body-text .important-text-bg}
**Note:** we're now writing our rules beneath the `/*--- scss:rules ---*/` region decorator.
:::
:::

::: {.column width="50%"}

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "29-41"
/*-- scss:defaults --*/

// import fonts from fonts.google.com 
@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Nunito:wght@400;800&display=swap');

// colors
$green: #348553;
$light-green: #589244; 
$yellow: #E9A300;
$red: #A23601;
$white: #FFFFFF;
$gray: #ADADAD;
$black: #525452; 

// font styles
$font-family-sans-serif: 'Nunito', sans-serif;
$font-family-serif: 'Arvo', serif; 

// find all Quarto Sass vars here: https://quarto.org/docs/output-formats/html-themes.html#sass-variables
$font-size-root: 1.2em; 
$body-color: $black;
$link-color: $red; 
$toc-color: $green; 
$toc-active-border: $yellow; 
$toc-inactive-border: $gray; 
$code-color: $light-green; 
$code-bg: $white;

/*-- scss:rules --*/

// level two styling
h2 { 
  color: $green;
  border-bottom: 3px solid $yellow;
  font-family: $font-family-serif;
}

// level three stying
h3 {
  color: $green;
}
```

:::

::::

---

##  {#modify-existing-classes data-menu-title="Modifying existing classes"}

[Modify existing class selectors]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

::: {.body-text}
Inspecting reveals the existing class selectors (already defined by the Quarto framework), `.title` and `.lead`, which are used to target the document title and subtitle, respectively. We can modify what these do by including them in our stylesheet. I'll make the following updates:

- **Document title (targeted with `.title` class):** 
  - colored green
  - serif font (Arvo)
  - increase font size
- **Document subtitle (targeted with `.lead` class):** 
  - increase font size
:::

:::

::: {.column width="50%"}

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "42-53"
/*-- scss:defaults --*/

// import fonts from fonts.google.com 
@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Nunito:wght@400;800&display=swap');

// colors
$green: #348553;
$light-green: #589244; 
$yellow: #E9A300;
$red: #A23601;
$white: #FFFFFF;
$gray: #ADADAD;
$black: #525452; 

// font styles
$font-family-sans-serif: 'Nunito', sans-serif;
$font-family-serif: 'Arvo', serif; 

// find all Quarto Sass vars here: https://quarto.org/docs/output-formats/html-themes.html#sass-variables
$font-size-root: 1.2em; 
$body-color: $black;
$link-color: $red; 
$toc-color: $green; 
$toc-active-border: $yellow; 
$toc-inactive-border: $gray; 
$code-color: $light-green; 
$code-bg: $white;

/*-- scss:rules --*/

// level two styling
h2 { 
  color: $green;
  border-bottom: 3px solid $yellow;
  font-family: $font-family-serif;
}

// level three stying
h3 {
  color: $green;
}

// style document title 
.title {
  color: $green;
  font-family: $font-family-serif;
  font-size: 2.3rem;
}

// adjust size of documment subtitle
.lead {
  font-size: 1.5rem;
}
```

:::

::::

---

##  {#create-new-classes data-menu-title="Create new class selectors"}

[Create new class selectors]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

::: {.body-text}
Let's say we want to better highlight the very last sentence of our report, which links out to our GitHub repo & provides instructions for contributing:

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/boring-text.png")
```

We can create three new classes that:

- increase the size of the text (`.large-text`)
- center the text (`.center-text`)
- color/style the background of our text to make it stand out (`.highlight-text`)

:::

:::

::: {.column width="50%"}

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "55-72"
/*-- scss:defaults --*/

// import fonts from fonts.google.com 
@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Nunito:wght@400;800&display=swap');

// colors
$green: #348553;
$light-green: #589244; 
$yellow: #E9A300;
$red: #A23601;
$white: #FFFFFF;
$gray: #ADADAD;
$black: #525452; 

// font styles
$font-family-sans-serif: 'Nunito', sans-serif;
$font-family-serif: 'Arvo', serif; 

// find all Quarto Sass vars here: https://quarto.org/docs/output-formats/html-themes.html#sass-variables
$font-size-root: 1.2em; 
$body-color: $black;
$link-color: $red; 
$toc-color: $green; 
$toc-active-border: $yellow; 
$toc-inactive-border: $gray; 
$code-color: $light-green; 
$code-bg: $white;

/*-- scss:rules --*/

// level two styling
h2 { 
  color: $green;
  border-bottom: 3px solid $yellow;
  font-family: $font-family-serif;
}

// level three stying
h3 {
  color: $green;
}

// style document title 
.title {
  color: $green;
  font-family: $font-family-serif;
  font-size: 2.3rem;
}

// adjust size of documment subtitle
.lead {
  font-size: 1.5rem;
}

// center text
.center-text { 
  text-align: center;
}

.large-text {
  font-size: 1.4rem;
}

// yellow highlight
.highlight-text {
  background-color: rgba(233, 163, 0, 0.2); 
  padding-top: 5px; 
  padding-bottom: 5px; 
  padding-right: 5px; 
  padding-left: 8px; 
  border-radius: 25px;
}
```

:::

::::

---

##  {#apply-new-classes data-menu-title="Apply new class selectors"}

[Apply new class selectors]{.slide-title}

<hr>

::: {.body-text}
Now that we've written our class selectors, we need to apply them to the HTML elements we want to style (recall, **HTML elements can have more than one class**):
:::

```{html}
#| eval: false
#| echo: true
<p class="large-text highlight-text center-text">Explore our analysis on [{{< fa brands github >}} GitHub](https://github.com/samanthacsik/cute-cats-dogs). If you have suggestions on how to improve this report, please [file an issue](https://github.com/samanthacsik/cute-cats-dogs/issues).</p>
```

::: {.body-text}
which will render as:
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "20px"
knitr::include_graphics("images/standout-text.png")
```

---

##  {#final-styling data-menu-title="Final styled doc"}

[Check out your final styled document!]{.slide-title}

<hr>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/final-report.gif")
```

