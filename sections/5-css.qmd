---
format: revealjs
---

##  {#light-intro-css data-menu-title="Light intro to CSS"}

[A *light* introduction to CSS {{< fa brands css3-alt >}} `r fontawesome::fa("html5", fill = "#FFFFFF", a11y = "sem")`]{.slide-title}

<hr>

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/css-logo.png")
```

---

##  {#css-rules data-menu-title="CSS rules"}

[CSS is a rule-based language]{.slide-title}

<hr>

::: {.body-text}
CSS is a rule-based language -- it allows you to **define groups of styles that should be applied to particular elements or groups of elements on a web page**. For example, *"I want all level one (`<h1>`) headings to be green text with a bit of extra space between each letter"* could be coded as:
:::

<!-- :::: {.columns} -->

<!-- ::: {.column width="50%"} -->

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/css-syntax.png")
```

<!-- ::: -->

<!-- ::: {.column width="50%"} -->

<!-- ::: {.body-text} -->

<!-- {{< fa angle-right >}} **Selectors** select the HTML element(s) you want to style *(e.g. level one headings, `<h1>`)* -->

<!-- {{< fa angle-right >}} **Declarations** sit inside curly brackets, `{}`, and are made up of **property** and **value** pairs. Each pair specifies the property of the HTML element(s) you're selecting *(e.g. the color property of the element `<h1>`)*, and a value you'd like to assign to that property *(e.g. green)*= -->

<!-- {{< fa angle-right >}} A property and its corresponding value are separated by a colon, `:`. Declarations end with a semicolon, `;` -->

<!-- ::: -->
<!-- ::: -->

<!-- :::: -->
<br>

. . . 

::: {.body-text}
**We're going to focus on *element* and *class* selectors**, but check out [these slides](https://ucsb-meds.github.io/customizing-quarto-websites/#/selector-types) for an overview of other simple selectors. [W3 Schools](https://www.w3schools.com/css/default.asp) is also an excellent resource for learning about [CSS selectors](https://www.w3schools.com/css/css_selectors.asp), exploring the many [CSS properties](https://www.w3schools.com/cssref/index.php), and much much more (I use this all the time!).
:::

---

##  {#select-tags data-menu-title="Element & Grouping Selectors"}

[Select an element(s) based on its tag]{.slide-title}

<hr>

::: {.panel-tabset}

## Element Selectors

::: {.body-text}
Any HTML element can be used as a selector. The declarations specified apply to all HTML elements of that type.
:::

:::: {.columns}

::: {.column width="60%"}

**CSS**

```{css}
#| eval: false
#| echo: true
h1 {
  color: green;
  letter-spacing: 5px;
}
```

<br>

**HTML**

```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will not be styled</h2>
<p>Neither will this paragaph</p>
<h1>But this second level one header will be</h1>
```

:::

::: {.column width="40%"}

<br>
<br>

::: {.center-text}
**Output**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/element-selector.png")
```

:::

::::

## Grouping Selectors

::: {.body-text}
Group multiple element selectors together (separated by commas) if you want them all styled the same way.
:::

:::: {.columns}

::: {.column width="60%"}

**CSS**

```{css}
#| eval: false
#| echo: true
h1, h2, p {
  text-align: center;
  color: purple;
}
```

<br>

**HTML**

```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will be styled</h2>
<h3>This level three header will not be styled</h3>
<p>This paragraph will be styled</p>
```

:::

::: {.column width="40%"}

<br>
<br>

::: {.center-text}
**Output**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/grouping-selector.png")
```

:::

::::

:::

---

##  {#class-selectors data-menu-title="Class Selectors"}

[Target an element(s) using class selectors]{.slide-title-smaller}

<hr>

::: {.body-text}
A class selector uses the *`class` attribute* of an HTML element to style that specific element. Class selectors are written using a `.` followed by the selector name, e.g. `.selector`. HTML elements can have more than one class, e.g. `<p class="class1 class2">`
:::

:::: {.columns}

::: {.column width="50%"}

**CSS**

```{css}
#| eval: false
#| echo: true
.blue-italicized {
  color: blue;
  font-style: italic;
}
```

<br>

**HTML**

```{html}
#| eval: false
#| echo: true
<p class="blue-italicized">My first paragraph is styled</p>
<p>But my second paragraph is not</p>
```

:::

::: {.column width="50%"}

<br>

::: {.center-text}
**Output**
:::


```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/class-selector.png")
```

:::

::::

---

##  {#spans data-menu-title="Spans"}

[Use `<span>` to target part of an element]{.slide-title-smaller}

<hr>

::: {.body-text}
The HTML `<span>` tag is used to apply class selectors to *part* of an element.
:::

<br>

:::: {.columns}

::: {.column width="50%"}

**CSS**

```{css}
#| eval: false
#| echo: true
.blue-italicized {
  color: blue;
  font-style: italic;
}
```

<br>

**HTML**

```{html}
#| eval: false
#| echo: true
<p>Only the word <span class="blue-italicized">blue</span> is styled.</p>
```

:::

::: {.column width="50%"}

<br>

::: {.center-text}
**Output**
:::


```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/span.png")
```

:::

::::

---

##  {#conflicting-rules data-menu-title="Conflicting Rules"}

[Conflicting rules? The more specific rule wins]{.slide-title-smallest}

<hr>

::: {.body-text}
It is common to have more than one CSS rule that points to the same element. As you build more complex stylesheets, determining which CSS rule "wins out" can get complicated. At a very basic level, the more specific CSS "wins". In the context of today's talk, **class selectors are more specific than element selectors** and will take precedence. 
:::

:::: {.columns}

::: {.column width="50%"}

**CSS**

```{css}
#| eval: false
#| echo: true
h1 {
  color: blue; 
  font-style: italic; 
}

.orange-text {
  color: orange;
}
```

<br>

**HTML**

```{html}
#| eval: false
#| echo: true
<h1>This level one header will be blue</h1>
<h1 class="orange-text">This one will be orange</h1>
```

:::

::: {.column width="50%"}

<br>
<br>

::: {.center-text}
**Output**
:::


```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/specificity.png")
```

:::

::::

