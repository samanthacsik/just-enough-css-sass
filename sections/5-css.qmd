---
format: revealjs
---

##  {#light-intro-css data-menu-title="Light intro to CSS"}

[A *light* introduction to CSS `r fontawesome::fa("html5", fill = "#FFFFFF", a11y = "sem")`]{.slide-title}

<hr>

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/css-logo.png")
```

---

##  {#css-rules data-menu-title="CSS rules"}

[CSS is a rule-based language]{.slide-title}

<hr>

::: {.body-text}
CSS is a rule-based language, meaning that it allows you to **define groups of styles that should be applied to particular elements or groups of elements on a web page**. For example, *"I want all level one (`<h1>`) headings to be green text with a bit of extra space between each letter"* could be coded as:
:::

<!-- :::: {.columns} -->

<!-- ::: {.column width="50%"} -->

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/css-syntax.png")
```

<!-- ::: -->

<!-- ::: {.column width="50%"} -->

<!-- ::: {.body-text} -->

<!-- {{< fa angle-right >}} **Selectors** select the HTML element(s) you want to style *(e.g. level one headings, `<h1>`)* -->

<!-- {{< fa angle-right >}} **Declarations** sit inside curly brackets, `{}`, and are made up of **property** and **value** pairs. Each pair specifies the property of the HTML element(s) you're selecting *(e.g. the color property of the element `<h1>`)*, and a value you'd like to assign to that property *(e.g. green)*= -->

<!-- {{< fa angle-right >}} A property and its corresponding value are separated by a colon, `:`. Declarations end with a semicolon, `;` -->

<!-- ::: -->
<!-- ::: -->

<!-- :::: -->